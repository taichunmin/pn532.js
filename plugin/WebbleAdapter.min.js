!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t(require("lodash")):"function"==typeof define&&define.amd?define(["lodash"],t):(e="undefined"!=typeof globalThis?globalThis:e||self).Pn532WebbleAdapter=t(e._)}(this,(function(e){"use strict";const t=[{name:"JDY-33-BLE"},{name:"NFC-Pro-Q"},{name:"NFC-PRO"},{name:"PN532-BLE"}],i=[{serv:65280,notify:65281,write:65282},{serv:65504,notify:65505,write:65506},{serv:65504,notify:65505,write:65505}];return class{_isOpen=!1;charNotify=null;charWrite=null;device=null;name="adapter";service=null;install(r,n){const{Packet:a,pn532:o,utils:c}=r,{debug:s=0}=n,d=this;if(o.$adapter)throw new Error("adapter already exists");const l=e.uniq(e.map(i,"serv"));async function f(){return await e.invoke(navigator,"bluetooth.getAvailability")}function u(){return d._isOpen}function v(){return e.get(d,"device.gatt.connected")}async function w(e){const t=new a(e?.target?.value?.buffer);s&&c.logTime(`gattOnNotify = ${t.inspect}`);const i=o.rx.writable.getWriter();await i.write(t),i.releaseLock()}async function h(){c.logTime("device disconnected"),d._isOpen=!1,d.charNotify&&(v()&&d.charNotify.stopNotifications(),d.charNotify.removeEventListener("characteristicvaluechanged",w),d.charNotify=null),d.charWrite&&(d.charWrite=null),d.service&&(d.service=null),d.device&&(d.device.removeEventListener("gattserverdisconnected",h),v()&&d.device.gatt.disconnect(),d.device=null)}function g(t){return e.isInteger(t)?BluetoothUUID.canonicalUUID(t):t}async function p(){if(!await f())throw new Error("WebBLE not supported");if(d.device=await navigator.bluetooth.requestDevice({filters:t,optionalServices:l}),!d.device)throw new Error("no device");c.logTime(`device selected, name = ${d.device.name}, id = ${d.device.id}`);for(let e=0;!v()&&e<3;e++)try{c.logTime(`try to connect gatt (${e+1})`),await d.device.gatt.connect(),await c.sleep(500)}catch(e){}if(!v())throw new Error("Failed to connect gatt");d.device.addEventListener("gattserverdisconnected",h);const r=e.map(await d.device.gatt.getPrimaryServices(),"uuid");for(const t of i)if(e.includes(r,g(t.serv))&&(d.service=await d.device.gatt.getPrimaryService(t.serv),d.charNotify=await d.service.getCharacteristic(t.notify),d.charNotify?.properties?.notify&&(d.charWrite=await d.service.getCharacteristic(t.write),d.charWrite?.properties?.write))){d.charNotify.addEventListener("characteristicvaluechanged",w),await d.charNotify.startNotifications(),c.logTime(`gatt connected, serv = 0x${t.serv.toString(16)}, notify = 0x${t.notify.toString(16)}, write = 0x${t.write.toString(16)}`),d._isOpen=!0;break}if(!u())throw await h(),new Error("Serial over WebBLE not supported");await o.sendCommandWakeup(),await o.resetSettings()}return o.tx=new TransformStream({flush:async e=>{await h(),e.terminate()},transform:async(e,t)=>{for(const i of e.chunk(20))t.enqueue(i)}}),o.tx.readable.pipeTo(new WritableStream({write:async e=>{if(!d.charWrite)throw new Error("me.charWrite can not be null");await d.charWrite.writeValueWithResponse(e.buffer)}},new CountQueuingStrategy({highWaterMark:1}))),o.addMiddleware("writePacket",(async(e,t)=>(u()||await p(),await t()))),{connect:p,disconnect:h,isOpen:u,isSupported:f}}}}));
